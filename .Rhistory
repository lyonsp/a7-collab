View(user_repos)
most_popular <- (flattened_user_repos %>% filter(forks == max(forks)))$name
```
# Renders a readable table out of the dataframe.
kable(data_for_table)
# Creates a new dataframe with a summary of the original dataframe, shows the number of repos and average number of forks for each given language. Chose to include repositories where the language is not known (NA), because there is still interesting information related to these repositories.
summary_table <- data_for_table %>% group_by(Language) %>%
summarise("Number of repos" = n(),
"Avg Forks" = mean(`Number of Forks`))
# Renders a readable summary table.
kable(summary_table)
# Bonus
plot()
# Renders a readable table out of the dataframe.
kable(data_for_table)
# Creates a new dataframe with a summary of the original dataframe, shows the number of repos and average number of forks for each given language. Chose to include repositories where the language is not known (NA), because there is still interesting information related to these repositories.
summary_table <- data_for_table %>% group_by(Language) %>%
summarise("Number of repos" = n(),
"Avg Forks" = mean(`Number of Forks`))
# Renders a readable summary table.
kable(summary_table)
# Bonus
#plot()
# Stores formatted dates in a new column.
dates <- as.Date(flattened_user_repos$created_at) %>% format(format = "%b %d %Y")
flattened_user_repos <- flattened_user_repos %>% mutate(formatted_dates = dates)
# Creates a new dataframe with only name, url, language, forks, and formatted_dates columns, which are renamed with more readable names.
data_for_table <- flattened_user_repos %>% select(name, url, language, forks, formatted_dates)
names(data_for_table) <- c("Repo Name", "URL", "Language", "Number of Forks", "Date Created")
# install.packages("knitr")
# Load various libraries
library(dplyr)
library(jsonlite)
library(knitr)
# Stores the name of a GitHub organization. Can be changed to get info about other users.
user <- "INFO-498F"
# Authentication key and base url to be used to access user information
key <- "3543d6a434322cfbc3f7db5763035e8097570f3a"
base_url <- paste0("https://api.github.com/users/", user, "?access_token=", key)
# Stores information from given user in a dataframe
user_data <- fromJSON(base_url)
# URL to be used to request information about given user's repositories
repo_url <- user_data$repos_url
# Stores data about user's repositories, sorted in descending order by the date created, with a maximum of 100 repositoreis returned.
user_repos <- fromJSON(paste0(repo_url, "?access_token=", key, "&sort=created", "&order=desc", "&per_page=100"))
# Properly formats dataframe containing user repository information
flattened_user_repos <- flatten(user_repos)
# num_repos contains the number of repositories returned, most_popular is the name of the repository/ies with the greatest number of forks (will return two if there is a tie).
num_repos <- nrow(flattened_user_repos)
most_popular <- (flattened_user_repos %>% filter(forks == max(forks)))$name
```
Username: `r user`
- `r user` has `r num_repos` repositories
- The most popular repository/ies of `r user` is/are `r most_popular`
- Here is an image of `r user`:
![user_photo](`r user_data$avatar_url`)
```{r, echo = FALSE}
# Stores formatted dates in a new column.
dates <- as.Date(flattened_user_repos$created_at) %>% format(format = "%b %d %Y")
flattened_user_repos <- flattened_user_repos %>% mutate(formatted_dates = dates)
# Creates a new dataframe with only name, url, language, forks, and formatted_dates columns, which are renamed with more readable names.
data_for_table <- flattened_user_repos %>% select(name, url, language, forks, formatted_dates)
names(data_for_table) <- c("Repo Name", "URL", "Language", "Number of Forks", "Date Created")
kable(data_for_table)
# Creates a new dataframe with a summary of the original dataframe, shows the number of repos and average number of forks for each given language. Chose to include repositories where the language is not known (NA), because there is still interesting information related to these repositories.
summary_table <- data_for_table %>% group_by(Language) %>%
summarise("Number of repos" = n(),
"Avg Forks" = mean(`Number of Forks`))
# Renders a readable summary table.
kable(summary_table)
# Bonus
#plot()
# Stores formatted dates in a new column.
dates <- as.Date(flattened_user_repos$created_at) %>% format(format = "%b %d %Y")
flattened_user_repos <- flattened_user_repos %>% mutate(formatted_dates = dates)
# Creates a new dataframe with only name, url, language, forks, and formatted_dates columns, which are renamed with more readable names.
data_for_table <- flattened_user_repos %>% select(name, url, language, forks, formatted_dates)
names(data_for_table) <- c("Repo Name", "URL", "Language", "Number of Forks", "Date Created")
View(user_repos)
plot(user_repos$name, user_repos$forks)
barplot(user_repos$name, user_repos$forks)
?barplot
getwd()
library(shiny)
shinyServer(function(input, output) {
# Create a histogram property of the output
output$histogram <- renderPlot({
# Use shiny's renderPlot function to render a plot
x <- rnorm(input$num)
return(hist(x))
})
})
# install.packages("shiny")
library(shiny)
# Define UI for application that draws a histogram
shinyUI(
fluidPage(
# Application title
titlePanel("Hello Shiny!"),
numericInput("num", label = "# observations", value = 100),
# Create a mainPanel of the app
mainPanel(
# Plot the output with the name "histogram"
plotOutput('histogram')
)
)
)
shiny::runApp('Desktop/info498f/lecture-14-exercises/shiny-example')
getwd()
setwd("~/Users/planktonpey/Desktop/info498f/lecture-14-exercises")
getwd()
setwd("/Users/planktonpey/Desktop/info498f/lecture-14-exercises")
get(wd)
getwd()
setwd("~/Users/planktonpey/Desktop/info498f/lecture-14-exercises")
setwd("/Users/planktonpey/Desktop/info498f/lecture-14-exercises")
library(shiny)
library(shiny)
x <- rnorm(100)
y <- rnorm(100)
plot(x,y, col='blue')
x <- rnorm(make_plot$x)
setwd("/Users/planktonpey/Desktop/info498f/lecture-14-exercises")
library(shiny)
shinyServer(function(input, output) {
output$newplot <- renderPlot({
return(plot(x, y))
})
})
library(shiny)
shinyUI(
fluidPage(
titlePanel("Hey Shiny!"),
mainPanel(
)
)
)
library(shiny)
shinyUI(
fluidPage(
titlePanel("Hey Shiny!"),
mainPanel(
plotOutput('newplot')
)
)
)
shiny::runApp('exercise-2')
setwd("/Users/planktonpey/Desktop/info498f/lecture-14-exercises")
library(shiny)
shinyServer(function(input, output) {
output$newplot <- renderPlot({
return(plot(x, y, col = "blue"))
})
})
shiny::runApp('exercise-2')
shiny::runApp('exercise-2')
shiny::runApp('exercise-2')
library(shiny)
shinyUI(
fluidPage(
titlePanel("Hey Shiny!"),
numericInput("num", label = "# observations", value = 100),
mainPanel(
plotOutput('newplot')
)
)
shiny::runApp('exercise-2')
shiny::runApp('exercise-2')
setwd("/Users/planktonpey/Desktop/info498f/lecture-14-exercises")
library(shiny)
shinyServer(function(input, output) {
output$newplot <- renderPlot({
x <- rnorm(input$num)
y <- rnorm(input$num)
return(plot(x, y, col = "blue"))
})
})
shiny::runApp('exercise-2')
setwd("/Users/planktonpey/Desktop/info498f/lecture-14-exercises")
library(shiny)
shinyServer(function(input, output) {
output$newplot <- renderPlot({
x <- rnorm(input$num)
y <- rnorm(input$num)
return(plot(x, y, col = input$color))
})
})
shiny::runApp('exercise-2')
library(shiny)
shinyUI(
fluidPage(
titlePanel("Hey Shiny!"),
numericInput("num", label = "# observations", value = 100),
selectInput("color", label = "Color", choices = "Red, Blue, Green")
mainPanel(
plotOutput('newplot')
)
)
)
build_chart1 <- function(data) {
xAxis <- list(
title = "Proficiency in R"
)
yAxis <- list(
title = "Number of People"
)
chart1 <- plot_ly(data,
x = What.is.your.familiarity.with..Using.the.R.programming.language,
y = What.is.your.programming.experience.,
color=What.is.your.familiarity.with..Using.the.R.programming.language,
type = "histogram"
)  %>%
layout(title = "R Proficiency Before Class", margin = list(l = 100), margin = list(b = 0),
xaxis = xAxis, yaxis = yAxis)
return(chart1)
}
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
View(data)
source("scripts/build_chart1.R")
cwd
cwd()
getwd()
setwd("/Users/planktonpey/Desktop/info498f/a7-collab")
source("scripts/build_chart1.R")
chart1
build_chart1 <- function(data) {
xAxis <- list(
title = "Proficiency in R"
)
yAxis <- list(
title = "Number of People"
)
chart1 <- plot_ly(data,
x = What.is.your.familiarity.with..Using.the.R.programming.language,
y = What.is.your.programming.experience.,
color=What.is.your.familiarity.with..Using.the.R.programming.language,
type = "histogram"
)  %>%
layout(title = "R Proficiency Before Class", margin = list(l = 100), margin = list(b = 0),
xaxis = xAxis, yaxis = yAxis)
return(chart1)
}
build_chart1(data)
library(dplyr)
library(plotly)
library(knitr)
build_chart1(data)
kable(build_chart1(data))
build_chart1(data)
library(dplyr)
library(jsonlite)
source("scripts/a7_summary_information.R")
library(dplyr)
library(plotly)
setwd("/Users/planktonpey/Desktop/info498f/a7-collab")
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
source("scripts/a7_summary_information.R")
library(dplyr)
library(plotly)
setwd("/Users/planktonpey/Desktop/info498f/a7-collab")
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
source("scripts/a7_summary_information.R")
